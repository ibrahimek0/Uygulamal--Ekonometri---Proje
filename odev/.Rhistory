set_mode("classification")
rf_model <- rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %>%
set_engine("ranger") %>%
set_mode("classification")
install.packages("parsnip")
install.packages("parsnip")
library(parsnip)
rf_model <- rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %>%
set_engine("ranger") %>%
set_mode("classification")
set.seed(123)
rf_wf <-
workflow() %>%
add_model(rf_model) %>%
add_recipe(st_recipe)
install.packages("workflows")
library(workflows)
rf_model <- rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %>%
set_engine("ranger") %>%
set_mode("classification")
set.seed(123)
rf_wf <-
workflow() %>%
add_model(rf_model) %>%
add_recipe(st_recipe)
rf_wf
set.seed(123)
spaceship_val <- validation_split(train,
strata = Transported,
prop = 0.80)
install.packages("rsample")
library(rsample)
set.seed(123)
spaceship_val <- validation_split(train,
strata = Transported,
prop = 0.80)
set.seed(123)
spaceship_val <- validation_split(train,
strata = Transported,
prop = 0.80)
set.seed(123)
spaceship_val <- validation_split(train,
strata = Transported,
prop = 0.80)
rf_results <-
rf_wf %>%
tune_grid(resamples = spaceship_val,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(accuracy)
)
rf_results <-
rf_wf %>%
tune_grid(resamples = spaceship_val,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(accuracy)
)
install.packages("tune")
library(tune)
rf_results <-
rf_wf %>%
tune_grid(resamples = spaceship_val,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(accuracy)
)
install.packages("yardstick")
install.packages("yardstick")
library(yardstick)
rf_results <-
rf_wf %>%
tune_grid(resamples = spaceship_val,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(accuracy)
)
rf_results <-
rf_wf %>%
tune_grid(resamples = spaceship_val,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(accuracy)
)
rf_results <-
rf_wf %>%
tune_grid(resamples = spaceship_val,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(accuracy)
)
metrics <- metric_set(accuracy)
rf_results <-
rf_wf %>%
tune_grid(resamples = spaceship_val,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(accuracy)
)
install.packages("magrittr")
install.packages("magrittr")
library(magrittr)  # or library(dplyr)
rf_results <-
rf_wf %>%
tune_grid(resamples = spaceship_val,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(accuracy)
)
rf_results <-
rf_wf %>%
tune_grid(resamples = spaceship_val,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(accuracy)
)
rf_results <-
rf_wf %>%
tune_grid(resamples = spaceship_val,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(accuracy)
)
install.packages("tune")
library(tune)
rf_results <-
rf_wf %>%
tune_grid(resamples = spaceship_val,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(accuracy)
)
library(yardstick)
install.packages("yardstick")
install.packages("yardstick")
install.packages("yardstick")
install.packages("yardstick")
library(yardstick)
rm(metrics)
yardstick::metrics()
rf_results <-
rf_wf %>%
tune_grid(resamples = spaceship_val,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(accuracy)
)
set.seed(123)
spaceship_val <- validation_split(train,
strata = Transported,
prop = 0.80)
install.packages("rsample")
library(rsample)
set.seed(123)
spaceship_val <- validation_split(train,
strata = Transported,
prop = 0.80)
set.seed(123)
spaceship_val <- validation_split(train,
strata = Transported,
prop = 0.80)
set.seed(123)
spaceship_val <- validation_split(train,
strata = Transported,
prop = 0.80)
set.seed(123)
spaceship_val <- validation_split(train,
strata = Transported,
prop = 0.80)
rf_results <-
rf_wf %>%
tune_grid(resamples = spaceship_val,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(accuracy)
)
rf_results <-
rf_wf %>%
tune_grid(resamples = spaceship_val,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(accuracy)
)
rf_results <-
rf_wf %>%
tune_grid(resamples = spaceship_val,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(accuracy)
)
rf_results <-
rf_wf %>%
tune_grid(resamples = spaceship_val,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(accuracy)
)
rf_results <-
rf_wf %>%
tune_grid(resamples = spaceship_val,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(accuracy)
)
rf_results <-
rf_wf %>%
tune_grid(resamples = spaceship_val,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(accuracy)
)
set.seed(123)
spaceship_val <- validation_split(train,
strata = Transported,
prop = 0.80)
rf_results <-
rf_wf %>%
tune_grid(resamples = spaceship_val,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(accuracy)
)
install.packages("dplyr")
install.packages("dplyr")
install.packages("tidyverse")
library(dplyr)
# or
library(tidyverse)
rf_results <-
rf_wf %>%
tune_grid(resamples = spaceship_val,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(accuracy)
)
rf_results <-
rf_wf %>%
tune_grid(resamples = spaceship_val,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(accuracy)
)
rf_results <-
rf_wf %>%
tune_grid(resamples = spaceship_val,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(accuracy)
)
rf_results <-
rf_wf %>%
tune_grid(resamples = spaceship_val,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(accuracy)
)
rf_results <-
rf_wf %>%
tune_grid(resamples = spaceship_val,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(accuracy)
)
rf_results <-
rf_wf %>%
tune_grid(resamples = spaceship_val,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(accuracy)
)
rf_results <-
rf_wf %>%
tune_grid(resamples = spaceship_val,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(accuracy)
)
rf_results <-
rf_wf %>%
tune_grid(resamples = spaceship_val,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(accuracy)
)
rf_results <-
rf_wf %>%
tune_grid(resamples = spaceship_val,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(accuracy)
)
library(tune)
library(tidymodels)
rf_results <-
rf_wf %>%
tune_grid(resamples = spaceship_val,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(accuracy)
)
rf_results %>%
collect_predictions()
rf_results %>%
collect_metrics()
param_final <- rf_results %>%
select_best(metric = "accuracy")
param_final
last_rf_model <- rand_forest(mtry = param_final$mtry, min_n = param_final$min_n, trees = 1000) %>%
set_engine("ranger") %>%
set_mode("classification")
last_rf_wf <- rf_wf %>%
update_model(last_rf_model)
last_rf_fit <-
last_rf_wf %>%
fit(train)
last_rf_model <- rand_forest(mtry = param_final$mtry, min_n = param_final$min_n, trees = 1000) %>%
set_engine("ranger") %>%
set_mode("classification")
last_rf_wf <- rf_wf %>%
update_model(last_rf_model)
last_rf_fit <-
last_rf_wf %>%
fit(train)
test_pred <- predict(last_rf_fit, test)
options(warn = getOption("warn"))
test_pred_new <- test_pred %>%
mutate(.pred_class = str_to_title(.pred_class))
submission$Transported <- test_pred_new$.pred_class
write_csv(submission, "submissionrf.csv")
write_csv(submission, "submissionrf.csv")
bt_cls_spec <-
boost_tree(trees = 15) %>%
# This model can be used for classification or regression, so set mode
set_mode("classification") %>%
set_engine("xgboost")
bt_cls_spec <-
boost_tree(trees = 15) %>%
# This model can be used for classification or regression, so set mode
set_mode("classification") %>%
set_engine("xgboost")
# Create a workflow
st_workflow <- workflow() %>%
add_recipe(st_recipe) %>%
add_model(bt_cls_spec)
# Fit the model directly with the workflow
trained_model <- st_workflow %>%
fit(data = train)
update.packages()
# Fit the model directly with the workflow
trained_model <- st_workflow %>%
fit(data = train)
.rs.restartR()
# Fit the model directly with the workflow
trained_model <- st_workflow %>%
fit(data = train)
parsnip:::check_installs(object)
# Fit the model directly with the workflow
trained_model <- st_workflow %>%
fit(data = train)
install.packages("xgboost")
library(xgboost)
# Fit the model directly with the workflow
trained_model <- st_workflow %>%
fit(data = train)
# Prepare the test data and make predictions in one step
predictions <- trained_model %>%
predict(new_data = test) %>%     # Directly pass the test data
bind_cols(test)                   # Bind the original test data for reference
# Step 3: Extract the id from the test data and the predicted prices
submission <- predictions %>%
select(PassengerId = PassengerId, .pred_class = .pred_class) %>%  # Adjust this if the id is stored differently
rename(Transported = .pred_class)                # Rename predicted column if needed
# Step 3: Extract the id from the test data and the predicted prices
submission <- predictions %>%
select(PassengerId = PassengerId, .pred_class = .pred_class) %>%  # Adjust this if the id is stored differently
rename(Transported = .pred_class)                # Rename predicted column if needed
submission <- as.data.frame(submission)
submission$Transported <- str_to_title(submission$Transported)
submission$Transported <- str_to_title(submission$Transported)
write.csv(submission, "submission_xg.csv", row.names = FALSE, quote = FALSE)
svm_cls_spec <-
svm_poly(cost = 1) %>%
# This model can be used for classification or regression, so set mode
set_mode("classification") %>%
set_engine("kernlab")
# Create a workflow
st_workflow <- workflow() %>%
add_recipe(st_recipe) %>%
add_model(svm_cls_spec)
# Fit the model directly with the workflow
trained_model <- st_workflow %>%
fit(data = train)
# Fit the model directly with the workflow
trained_model <- st_workflow %>%
fit(data = train)
install.packages("kernlab")
library(kernlab)
# Fit the model directly with the workflow
trained_model <- st_workflow %>%
fit(data = train)
# Prepare the test data and make predictions in one step
predictions <- trained_model %>%
predict(new_data = test) %>%     # Directly pass the test data
bind_cols(test)                   # Bind the original test data for reference
# Step 3: Extract the id from the test data and the predicted prices
submission <- predictions %>%
select(PassengerId = PassengerId, .pred_class = .pred_class) %>%  # Adjust this if the id is stored differently
rename(Transported = .pred_class)                # Rename predicted column if needed
submission <- as.data.frame(submission)
submission$Transported <- str_to_title(submission$Transported)
write.csv(submission, "submission_polysvm.csv", row.names = FALSE, quote = FALSE)
svm_cls_spec <-
svm_rbf(cost = 1) %>%
# This model can be used for classification or regression, so set mode
set_mode("classification") %>%
set_engine("kernlab")
# Create a workflow
st_workflow <- workflow() %>%
add_recipe(st_recipe) %>%
add_model(svm_cls_spec)
# Fit the model directly with the workflow
trained_model <- st_workflow %>%
fit(data = train)
# Prepare the test data and make predictions in one step
predictions <- trained_model %>%
predict(new_data = test) %>%     # Directly pass the test data
bind_cols(test)                   # Bind the original test data for reference
# Prepare the test data and make predictions in one step
predictions <- trained_model %>%
predict(new_data = test) %>%     # Directly pass the test data
bind_cols(test)                   # Bind the original test data for reference
# Step 3: Extract the id from the test data and the predicted prices
submission <- predictions %>%
select(PassengerId = PassengerId, .pred_class = .pred_class) %>%  # Adjust this if the id is stored differently
rename(Transported = .pred_class)                # Rename predicted column if needed
submission <- as.data.frame(submission)
submission$Transported <- str_to_title(submission$Transported)
write.csv(submission, "submission_rbfsvm.csv", row.names = FALSE, quote = FALSE)
quarto::quarto_render()
quarto::quarto_render()
library(tidymodels)
quarto::quarto_render()
quarto render odev1.qmd
cd path/to/your/project
system("quarto render odev1.qmd")
describe_all(train)
describe_all(train)
install.packages("psych")
library(psych)
describe_all(train)
summary(train)
describe_all(train)
install.packages("skimr")
library(skimr)
skim(train)
describe_all(train)
library(dplyr)
train %>% summarise(across(everything(), mean, na.rm = TRUE))
describe_all(train)
describe_all(train)
library(psych)
summary(train)
install.packages("skimr")
library(skimr)
skim(train)
install.packages("skimr")
describe_all(train)
library(dplyr)
train %>% summarise(across(everything(), ~mean(. , na.rm = TRUE)))
describe_all(train)
psych::describe(train)
describe_all(train)
describe_all(train)
describe_all(train)
library(psych)
psych::describe(train)
summary(train)
library(psych)
psych::describe(train)
quarto::quarto_render()
head(train$PassengerId)
head(train$PassengerId)
head(train$PassengerId)
head(train$PassengerId)
head(train$PassengerId)
head(train$PassengerId)
head(train$PassengerId)
head(train$PassengerId)
head(train$PassengerId)
quarto::quarto_render()
system("quarto render odev1.qmd")
summary(test)
grid.arrange(p_train, p_test, ncol = 2)
grid.arrange(p_train, p_test, ncol = 2)
install.packages("gridExtra")
grid.arrange(p_train, p_test, ncol = 2)
grid.arrange(p_train, p_test, ncol = 2)
library(gridExtra)
gridExtra::combine()
dplyr::combine()
grid.arrange(p_train, p_test, ncol = 2)
quarto::quarto_render()
head(train$PassengerId)
library(stringr)
train[c("ailenum", "ailesira")] <- str_split_fixed(train$PassengerId, "_", 2)
test[c("ailenum", "ailesira")] <- str_split_fixed(test$PassengerId, "_", 2)
head(train$PassengerId)
head(train$PassengerId)
quarto::quarto_render()
library(ggplot2)
quarto::quarto_render()
quarto::quarto_render()
